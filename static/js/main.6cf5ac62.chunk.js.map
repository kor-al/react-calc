{"version":3,"sources":["Calc.js","App.js","reportWebVitals.js","index.js"],"names":["Stack","this","stack","element","push","length","pop","peek","output","forEach","item","property","join","Operation","op","unary","includes","Error","operation","val1","val2","InputParser","reset","currentNumber","undefined","startNumber","inputSeq","numberIsLastResult","inNumber","hasDecimal","bracketOpen","symbol","prevSymbol","type","val","console","log","map","Button","props","handleClick","bind","register","label","id","className","onClick","React","Component","History","handleResultClick","result","expression","setValueFunc","items","reverse","value","index","toString","Blobs","slice","Math","min","maxBlobs","xmlns","height","width","viewBox","d","transform","Calc","state","history","currentItem","currentExpr","ops","values","parser","execute","registerInput","calcOp","saveToHistory","setFirstInputValue","navCalc","document","querySelector","navHist","pads","classList","add","addEventListener","e","contains","remove","expr","setState","currentSymbol","parse","getExpression","apply","input","i","isEmpty","curOp","priority","round","numbers","operations","Object","keys","key","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6cf5ac62.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Stack {\r\n\r\n    constructor() {\r\n        this.stack = [];\r\n    }\r\n\r\n    push(element) {\r\n        //put element to the stack\r\n        this.stack.push(element);\r\n    }\r\n\r\n    peek() {\r\n        if (this.stack.length === 0) return undefined;\r\n        //return the top element of the stack \r\n        return this.stack[this.stack.length - 1];\r\n    }\r\n\r\n    pop() {\r\n        //return the top element of the stack and remove it from the stack\r\n        if (this.stack.length === 0) return undefined;\r\n        return this.stack.pop();\r\n    }\r\n\r\n    isEmpty() {\r\n        // check if the stack is empty\r\n        return this.stack.length === 0;\r\n    }\r\n\r\n    print() {\r\n        if(typeof this.peek() =='object'){\r\n            let output = '';\r\n            this.stack.forEach( item =>{\r\n                for (var property in item) {\r\n                    output += property + ': ' + item[property]+'; ';\r\n                }});\r\n            return output;\r\n        }\r\n        return this.stack.join(', ')\r\n    }\r\n}\r\n\r\n\r\nclass Operation {\r\n\r\n    constructor(op,unary = false) {\r\n        if (!['+', '-', '*', '/', '(', ')'].includes(op)) throw new Error(`${op} is not an operation!`);\r\n        this.operation = op;\r\n        this.unary = unary;\r\n    }\r\n\r\n    priority() {\r\n        if (this.operation === '-' && this.unary) {\r\n            return 3;\r\n        }\r\n        if (this.operation === '+' || this.operation === '-') {\r\n            return 1;\r\n        }\r\n        if (this.operation === '*' || this.operation === '/') {\r\n            return 2;\r\n        }\r\n        if (this.operation === '(' || this.operation === ')') {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    apply(val1,val2){\r\n        switch (this.operation) {\r\n            case '+':\r\n                return val1 + val2;\r\n            case '-':\r\n                if (this.unary){\r\n                    return -1 * val2;}\r\n                else{\r\n                    return val1 - val2;\r\n                }\r\n            case '*':\r\n                return val1 * val2;\r\n            case '/':\r\n                return val1 / val2;\r\n            default:\r\n                throw new Error(`${this.operation} is not an operation!`);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nclass InputParser {\r\n\r\n    constructor() {\r\n        this.reset();\r\n        this.currentNumber = undefined;\r\n    }\r\n\r\n    //reset parser\r\n    //use provided number as a start of the expression\r\n    reset(startNumber = undefined) {\r\n        if (startNumber) {\r\n            //set first number in the operation with the result of the last expression\r\n            this.inputSeq = [startNumber];\r\n            this.numberIsLastResult = true;\r\n        } else {\r\n            this.inputSeq = []\r\n            this.numberIsLastResult = false;\r\n        }\r\n        this.inNumber = false;\r\n        this.hasDecimal = false;\r\n        this.bracketOpen = false;\r\n    }\r\n\r\n\r\n    parse(symbol) {\r\n        //only expression ending with \"=\" can be executed later\r\n        //so use \"=\" to signify correctness of the expression\r\n        let prevSymbol = this.inputSeq[this.inputSeq.length - 1];\r\n\r\n        if (symbol.type === 'equals') {\r\n            // \"=\" can be clicked only if some input was provided AND input should not be a previous result\r\n            if (this.inputSeq.length && !this.numberIsLastResult) {\r\n                //remove operations at the end\r\n                while (this.inputSeq.length && prevSymbol.type === 'operation') {\r\n                    this.inputSeq.pop();\r\n                    prevSymbol = this.inputSeq[this.inputSeq.length - 1];\r\n                }\r\n                //add bracket if needed\r\n                if (this.bracketOpen) {\r\n                    this.inputSeq.push({\r\n                        type: 'bracket',\r\n                        val: ')'\r\n                    });\r\n                }\r\n                //push '=' at the end\r\n                this.inputSeq.push(symbol);\r\n            }\r\n            else{\r\n                return undefined;  //do not update \r\n            }\r\n        }\r\n        if (symbol.val === '(') {\r\n            if (this.inputSeq.length === 0 || (this.inputSeq.length && prevSymbol.type === 'operation')) {\r\n                this.bracketOpen = true;\r\n                this.inputSeq.push(symbol);\r\n            }\r\n        }\r\n        if (symbol.val === ')') {\r\n            if (this.bracketOpen && prevSymbol.val !== '(' && prevSymbol.type !== 'operation') {\r\n                this.bracketOpen = false;\r\n                this.inputSeq.push(symbol);\r\n            }\r\n        }\r\n        if (symbol.type === 'operation') {\r\n            //number ended - reset variables\r\n            this.inNumber = false;\r\n            this.hasDecimal = false;\r\n            //work with the previous result as if it was manually typed\r\n            if (this.numberIsLastResult) {\r\n                this.numberIsLastResult = false;\r\n            }\r\n            //identify unary operations\r\n            if (symbol.val === '-' && (this.inputSeq.length === 0 || (this.inputSeq.length && prevSymbol.type !== 'number'))) {\r\n                symbol.unary = true;\r\n            } else {\r\n                symbol.unary = false;\r\n            }\r\n\r\n            //do not allow mult and division at the start of the expression\r\n            if (this.inputSeq.length === 0 && symbol.val !== '-') {} else {\r\n                //do not allow many operations in a row\r\n                if (this.inputSeq.length && prevSymbol.type === 'operation' && (symbol.unary === false || (symbol.unary === true && prevSymbol.unary === true))) {\r\n                    //if an item before the previous is also an operation e.g. 5*-+5\r\n                    if((this.inputSeq[this.inputSeq.length - 2]).type === 'operation'){\r\n                        this.inputSeq.pop()\r\n                        //only one minus left \r\n                        if(symbol.val === '-' && symbol.unary){\r\n                            symbol.unary = false;\r\n                        }\r\n                    }\r\n                    //replace the last operation with a new one\r\n                    this.inputSeq[this.inputSeq.length - 1] = symbol;\r\n                }\r\n                //otherwise\r\n                else {\r\n                    //push operation\r\n                    this.inputSeq.push(symbol);\r\n                }\r\n            }\r\n\r\n        }\r\n        if (symbol.type === 'number' || symbol.type === 'decimal') {\r\n            //remove last result if new value in entered instead\r\n            if (this.numberIsLastResult) {\r\n                this.inputSeq = []\r\n                this.numberIsLastResult = false;\r\n            }\r\n            //if it's the first symbol in a number\r\n            if (!this.inNumber) {\r\n                //push a value symbol to the input sequence\r\n                this.inNumber = true;\r\n                //add zero before decimal if it only starts with it\r\n                if (symbol.type === 'decimal') {\r\n                    symbol.val = '0' + symbol.val;\r\n                    symbol.type = 'number'; //change type from decimal to number\r\n                }\r\n                this.currentNumber = symbol;\r\n                this.inputSeq.push(this.currentNumber);\r\n            }\r\n            //if the number continues append values to the symbol object in the input sequence\r\n            else {\r\n                if (symbol.type === 'number') {\r\n                    //skip more than 1 starting zero in a current number\r\n                    if (this.currentNumber.val.length === 1 && this.currentNumber.val[0] === '0' && symbol.val === '0') {\r\n                        console.log(\"already has leading zero\")\r\n                    } else {\r\n                        this.currentNumber.val += symbol.val;\r\n                    }\r\n                }\r\n                if (symbol.type === 'decimal') {\r\n                    this.inNumber = true;\r\n                    //skip if more than one decimal\r\n                    if (!this.hasDecimal) {\r\n                        this.currentNumber.val += symbol.val;\r\n                        this.hasDecimal = true;\r\n                    }\r\n                }\r\n                //update number\r\n                this.inputSeq[this.inputSeq.length - 1] = this.currentNumber;\r\n            }\r\n\r\n        }\r\n        return this.inputSeq[this.inputSeq.length - 1];\r\n\r\n    }\r\n\r\n    // get expression in a string  e.g. \"x{operation}y=\"\r\n    getExpression(){\r\n        return this.inputSeq.map((symbol) => symbol.val ).join('');\r\n    }\r\n\r\n\r\n}\r\n\r\nclass Button extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(){\r\n        if(this.props.type === 'clear'){\r\n            //reset parser and calc\r\n            this.props.register();\r\n        }\r\n        else{\r\n            //parse new symbol in an expression\r\n            this.props.register({val: this.props.label, type: this.props.type});\r\n        }        \r\n    }\r\n\r\n    render() {\r\n        return ( \r\n            <button id = {this.props.id} className={this.props.type}  onClick = {this.handleClick} > {this.props.label}</button>)\r\n    }\r\n\r\n}\r\n\r\nclass History extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleResultClick= this.handleResultClick.bind(this);\r\n    }\r\n\r\n    handleResultClick(result, expression){\r\n        this.props.setValueFunc(result, expression);\r\n    }\r\n\r\n    render() {\r\n        let items = this.props.items.reverse();\r\n        return ( \r\n            <ol className=\"history\">\r\n            {items.map((value, index) => {\r\n                return (\r\n                <li key = {`item${index}`} className='historyItem'  onClick = {() => this.handleResultClick(value.result, value.expression)}>\r\n                {value.expression}<span className='expressionResult'>{value.result.toString()}</span> \r\n                </li>)\r\n            })}\r\n            </ol>\r\n            )\r\n    }\r\n\r\n}\r\n\r\nfunction Blobs(props){\r\n  return(\r\n        <ol className=\"blobs\">\r\n        {props.items.reverse().slice(0, +Math.min(props.items.length, +props.maxBlobs)).map((value, index) => {\r\n            return (\r\n            <li key = {`blob-item${index}`} className='blobsItem'>\r\n            <svg id={`blobSvg-${index}`} xmlns=\"http://www.w3.org/2000/svg\" height=\"400\" width=\"400\" viewBox=\"0 0 200 200\">\r\n  <path d=\"M39.6,-47.2C51.9,-36.8,62.9,-24.9,65.1,-11.6C67.3,1.8,60.9,16.6,54.2,34.3C47.6,52,40.8,72.7,26.6,81.5C12.4,90.4,-9.2,87.5,-25.3,78C-41.4,68.5,-52.1,52.3,-57.5,36.4C-63,20.4,-63.2,4.6,-61.8,-12.1C-60.3,-28.9,-57.1,-46.6,-46.5,-57.2C-35.9,-67.8,-18,-71.4,-2.2,-68.8C13.6,-66.2,27.3,-57.5,39.6,-47.2Z\" transform=\"translate(100,100)\" />\r\n</svg>\r\n            </li>)\r\n        })}\r\n        </ol>\r\n  )\r\n}\r\n\r\nclass Calc extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {history : [], currentItem: 0, currentExpr: ''};\r\n        \r\n        this.ops = new Stack();\r\n        this.values = new Stack();\r\n\r\n        this.parser = new InputParser();\r\n        this.result = 0;\r\n\r\n        this.execute = this.execute.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n        this.registerInput= this.registerInput.bind(this);\r\n        this.calcOp= this.calcOp.bind(this);\r\n        this.saveToHistory= this.saveToHistory.bind(this);\r\n        this.setFirstInputValue = this.setFirstInputValue.bind(this);\r\n        \r\n    }\r\n    componentDidMount() {\r\n        var navCalc = document.querySelector(\".nav__calc\");\r\n        var navHist = document.querySelector(\".nav__history\");\r\n        var pads = document.querySelector(\".pads\");\r\n        var history = document.querySelector(\".history\");\r\n        navCalc.classList.add('active--link');\r\n\r\n        navCalc.addEventListener(\"click\", (e) => {\r\n            if(!navCalc.classList.contains('active--link')){\r\n                navCalc.classList.add('active--link');\r\n            }\r\n            if(navHist.classList.contains('active--link')){\r\n                navHist.classList.remove('active--link');\r\n            }\r\n            if (pads.classList.contains(\"active--left\")) {\r\n                pads.classList.remove(\"active--left\");\r\n            }\r\n            if (history.classList.contains(\"active--left\")) {\r\n                history.classList.remove(\"active--left\");\r\n            }\r\n        });\r\n\r\n        navHist.addEventListener(\"click\", (e) => {\r\n            if(!navHist.classList.contains('active--link')){\r\n                navHist.classList.add('active--link');\r\n            }\r\n            if(navCalc.classList.contains('active--link')){\r\n                navCalc.classList.remove('active--link');\r\n            }\r\n            if (!pads.classList.contains(\"active--left\")) {\r\n                pads.classList.add(\"active--left\");\r\n            }\r\n\r\n            if (!history.classList.contains(\"active--left\")) {\r\n                history.classList.add(\"active--left\");\r\n            }\r\n        });\r\n    }\r\n    \r\n    saveToHistory(expr, result){\r\n        let item = {'expression': expr, 'result' :result};\r\n        this.setState({history: [...this.state.history, item]});\r\n    }\r\n\r\n    reset() {\r\n        this.setState({currentItem : 0, currentExpr: ''});\r\n        this.parser.reset();\r\n        this.ops = new Stack();\r\n        this.values = new Stack();\r\n    }\r\n\r\n    setFirstInputValue(val, expr){\r\n        this.parser.reset({val: val, type: 'number'});\r\n        this.setState({currentItem: val});\r\n        if(expr){\r\n            this.setState({currentExpr: expr});\r\n        }\r\n    }\r\n\r\n    registerInput(symbol) {\r\n        let currentSymbol = this.parser.parse(symbol);\r\n        if (currentSymbol) {\r\n            this.setState({\r\n                currentExpr: this.parser.getExpression()\r\n            });\r\n        }\r\n        if (symbol.type === 'equals') {\r\n            let result = this.execute();\r\n            //check if result was calculated\r\n            if (result!==undefined) {\r\n                //save expr and result to the history\r\n                this.saveToHistory(this.parser.getExpression(), result);\r\n                //update state\r\n                this.setState({\r\n                    currentItem: result\r\n                });\r\n\r\n                //use result as a possible start fot the next expression\r\n                this.setFirstInputValue(result);\r\n            }\r\n        } else if (currentSymbol) {\r\n            this.setState({\r\n                currentItem: currentSymbol.val\r\n            });\r\n        }\r\n    }\r\n\r\n    calcOp(){\r\n        let val2 = this.values.pop();\r\n        let op = this.ops.pop();\r\n        let val1 = op.unary ? undefined : this.values.pop();\r\n        this.values.push(op.apply(val1, val2));\r\n    }\r\n\r\n    execute() {\r\n        console.log(this.parser.getExpression());\r\n        //input is stored in the parser's array  this.parser.inputSeq\r\n        //check if expression ends with =\r\n        if(this.parser.inputSeq.length  && this.parser.inputSeq[this.parser.inputSeq.length - 1].val !== '='){\r\n            return undefined;\r\n        }\r\n        //don't take '=' symbol at the end - use slice\r\n        let input = this.parser.inputSeq.slice( 0 , this.parser.inputSeq.length - 1);\r\n\r\n        for (let i = 0; i < input.length; i++) {\r\n            //if left bracket - just push it\r\n            if (input[i].val === '(') {\r\n                this.ops.push(new Operation(input[i].val));\r\n            } else {\r\n                //if number\r\n                if (input[i].type === 'number') {\r\n                    this.values.push(+input[i].val);\r\n                } else\r\n                //if brackets are closed, then it's time to calculate operations in these brackets \r\n                //apply operations while the opening bracket is not the top most operation\r\n                if (input[i].val === ')') {\r\n                    while (!this.ops.isEmpty() && this.ops.peek().operation !== '(') {\r\n                        this.calcOp();\r\n                    }\r\n                    // then pop the opening brace.\r\n                    if (!this.ops.isEmpty()) this.ops.pop();\r\n                } else {\r\n                    //if operation\r\n                    let curOp;\r\n                    if (input[i].unary) {\r\n                        curOp = new Operation(input[i].val, true);\r\n                    } else {\r\n                        curOp = new Operation(input[i].val);\r\n                    }\r\n                    //Apply pending operations\r\n                    while (!this.ops.isEmpty() && this.ops.peek().priority() >= curOp.priority()) {\r\n                        this.calcOp();\r\n                    }\r\n\r\n                    // Push current operation to  the stack\r\n                    this.ops.push(curOp);\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        // expression parsed\r\n        // calculate remaining operations\r\n        while (!this.ops.isEmpty()) {\r\n            this.calcOp();\r\n        }\r\n        \r\n        let result = this.values.peek();\r\n        result = Math.round(result * 100000) / 100000;\r\n        return result;\r\n    }\r\n\r\n\r\n    render() {\r\n        const numbers = { \"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9 }\r\n        const operations = { 'add': '+', 'subtract': '-', 'multiply': '*', 'divide': '/' }\r\n        return (\r\n            <div id='container'>\r\n                <div id='calc'>\r\n                    <div id=\"output\">\r\n                        <div id='expression'>{this.state.currentExpr}</div>\r\n                        <div id='display'>{this.state.currentItem}</div>\r\n                    </div>\r\n                    <nav className=\"nav\"><span className='nav__calc'>Calculator</span><span className='nav__history'>History</span></nav>\r\n                    <div className='interface'>\r\n                        <div className='pads'>\r\n                            <div className='pads--numbers'>\r\n                                <Button key='decimal'  id='decimal' label='.' type='decimal' register={this.registerInput} />\r\n                                {Object.keys(numbers).map((key, index) => {\r\n                                    return <Button key={key.toString()} id={key.toString()} label={numbers[key].toString()} type='number' register={this.registerInput} />\r\n                                })}\r\n                            </div>\r\n                            <div className='pads--operations'>\r\n                                {Object.keys(operations).map((key, index) => {\r\n                                    return <Button key={key.toString()} id={key.toString()} label={operations[key].toString()} type='operation' register={this.registerInput} />\r\n                                })}\r\n                                <Button key='lbracket' label='(' type='bracket' register={this.registerInput} />\r\n                                <Button key='rbracket' label=')' type='bracket' register={this.registerInput} />\r\n\r\n                                <Button key='equals' label='=' type='equals' id='equals' register={this.registerInput} />\r\n                                <Button key='C' label='C' id='clear' type='clear' register={this.reset} />\r\n                            </div>\r\n                        </div>\r\n                        <History items={this.state.history} setValueFunc={this.setFirstInputValue} />\r\n                    </div>\r\n                    \r\n                </div>\r\n                <Blobs items={this.state.history} maxBlobs={7}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Calc;","\nimport './Calc.css';\nimport Calc from './Calc';\nimport ReactFCCtest from 'react-fcctest';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ReactFCCtest />\n        <Calc/> \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}